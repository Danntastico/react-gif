{"version":3,"sources":["components/addCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifCollection.js","hooks/useGifFetcher.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","item","id","title","images","downsized_medium","GifItem","className","src","alt","GifCollection","loading","state","setState","useEffect","then","img","console","log","useGifFetcher","key","GifExpertApp","categories","setCategories","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAY,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACtCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,0FAC2EC,UAC7FH,IAFkB,SAIDI,MAAMF,GAJL,cAIdG,EAJc,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZV,IAAKQ,EAAKG,OAAOC,iBAAiBZ,QAXlB,kBAcbM,GAda,4CAAH,sDCENO,EAAU,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC/B,OACE,oCACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,OCDCO,EAAgB,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHlB,SAACA,GAAc,IAAD,EACfd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH8B,mBAClCC,EADkC,KAC3BC,EAD2B,KAgBzC,OAVAC,qBAAU,WACRxB,EAAOC,GAAUwB,MAAK,SAACC,GACrBC,QAAQC,WAAWF,GACnBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDZ2BO,CAAc5B,GAAlCa,EAD+B,EACrCN,KAAca,EADuB,EACvBA,QAEtB,OACE,oCACE,4BAAKpB,GACJoB,GAAW,8CACZ,yBAAKJ,UAAU,aACZH,EAAOJ,KAAI,SAACgB,GAAD,OACV,kBAAC,EAAD,eAASI,IAAKJ,EAAId,IAAQc,UEXvBK,EAAe,WAAO,IAAD,EACI5C,mBAAS,CAAC,KADd,mBACzB6C,EADyB,KACbC,EADa,KAEhC,OACE,oCACE,qDACA,kBAAC,EAAD,CAAa/C,YAAa+C,IAC1B,6BACA,4BACGD,EAAWtB,KAAI,SAACwB,GAAD,OACd,kBAAC,EAAD,CAAeJ,IAAKI,EAAGjC,SAAUiC,WCP3CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.6f2a6aac.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategory }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategory((cats) => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategory: PropTypes.func.isRequired,\n};\n","export const getGif = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=uqsgF6cjuTOHpfkOxFClvA01Pes9eGbo&q=${encodeURI(\n    category\n  )}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((item) => {\n    return {\n      id: item.id,\n      title: item.title,\n      url: item.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from 'react';\n\nexport const GifItem = ({ title, url }) => {\n  return (\n    <>\n      <div className='card animate__animated animate__fadeIn'>\n        <img src={url} alt={title} />\n        <p>{title}</p>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useGifFetcher } from '../hooks/useGifFetcher';\nimport { GifItem } from './GifItem';\n//uqsgF6cjuTOHpfkOxFClvA01Pes9eGbo\n//api.giphy.com/v1/gifs/search\n\nexport const GifCollection = ({ category }) => {\n  const { data: images, loading } = useGifFetcher(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>Loading data...</p>}\n      <div className='card-grid'>\n        {images.map((img) => (\n          <GifItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { getGif } from '../helpers/getGifs';\n\nexport const useGifFetcher = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGif(category).then((img) => {\n      console.log(typeof img);\n      setState({\n        data: img,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/addCategory';\nimport { GifCollection } from './components/GifCollection';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['']);\n  return (\n    <>\n      <h1>React Gif Application</h1>\n      <AddCategory setCategory={setCategories} />\n      <hr />\n      <ul>\n        {categories.map((i) => (\n          <GifCollection key={i} category={i} />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}